function [tracks,wasTrackerUpdated,detections] = detectAndTrack(agent,time,posSe    lector)
% Create detections from the vehicle
poses = targetPoses(agent.Actor); % returns the poses of all targets in a driving...
                                  % scenario with respect to the ego vehicle actor

% Why only position and plus orientation !!
[detections,isValid] = vehicleDetections(agent.Actor.Position,agent.Sensors,poses,time,agent.DetPlotter); 

% Update the tracker to get tracks from sensors that reported detections
if isValid
    % StateParameters is empty by default
    agent.Tracker.StateParameters = struct(...
        'Frame','Rectangular', ...
        'OriginPosition', agent.Actor.Position, ...
        'OriginVelocity', agent.Actor.Velocity);
    tracks = agent.Tracker(detections,time); % Tracks from detection
    tracksInScenario = tracks;
    for i = 1:numel(tracks)
        tracksInScenario(i) = egoToScenario(tracks(i)); %egoToScenario2(tracks(i), agent); % % Coordinate Transformation
        
        % Rotate Manually
        trackInEgo = tracks(i);
        poseOfActor = deg2rad([agent.Actor.Yaw agent.Actor.Pitch agent.Actor.Roll]);
        rot = eul2tform(poseOfActor, 'ZYX');
        egoVelInScenario = trackInEgo.StateParameters.OriginVelocity; 
        translation = trvec2tform([0 0 0]);
        transformation = translation * rot;
        trackInEgoF = [tracksInScenario(i).State(1);tracksInScenario(i).State(3);tracksInScenario(i).State(5)];
        trackInGlobal = transformation * [trackInEgoF;1];
        velShift = [trackInEgo.State(2)+egoVelInScenario(1); ...
                    trackInEgo.State(4)+egoVelInScenario(2); ...
                    trackInEgo.State(6)+egoVelInScenario(3)];
        stateInGlob =[trackInGlobal(1);velShift(1);trackInGlobal(2);velShift(2);trackInGlobal(3);velShift(3)];
        trackInScenarioTemp = objectTrack('UpdateTime',trackInEgo.UpdateTime,'State',stateInGlob,'StateCovariance',trackInEgo.StateCovariance,'StateParameters',trackInEgo.StateParameters);
        tracksInScenario(i).State = trackInScenarioTemp.State;

        clear trackInEgo poseOfActor rot egoVelInScenario...
              translation transformation trackInEgoF trackInGlobal...
              velShift stateInGlob trackInScenarioTemp

    end
    pos = getTrackPositions(tracksInScenario,posSelector); % Already pos selected, It ignores the velocity
    plotTrack(agent.TrkPlotter,pos) % Plot here 
    wasTrackerUpdated = true;   
else
    tracks = objectTrack.empty(0,1);
    wasTrackerUpdated = false;
end

% Get additional tracks from tracking sensors

% NOTE! BE CAREFUL AT THAT STEP
% There is an independent coordinate frame change.
[sensorTracks,wasSensorTrackerUpdated] = ... !!! % creates tracks from sensor detection
            vehicleTracks(agent.Actor,agent.Sensors,poses,time,agent.TrkPlotter);
tracks = vertcat(tracks,sensorTracks); %track on the vehicle body frame
wasTrackerUpdated = wasTrackerUpdated || wasSensorTrackerUpdated;
end