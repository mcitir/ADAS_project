classdef helperLidarRadarTrackFusionDisplay < matlab.System
    % This is a helper class and may be removed or modified in a future
    % release.
    
    % This class implements the display for Radar and Lidar Track Fusion
    % Example. 
    
    % Copyright 2019 The MathWorks, Inc.
    
    properties
        FusedDisplayFront
        FusedDisplayRear
        RadarDisplay
        LidarDisplay
        CovarianceFusionDisplay
        EgoVehicleIndex = 1;
        FollowActorID = 2;
        TimeStep = 0;
    end
    
    properties
        Figure
    end
    
    properties
        RecordGIF = false;
        Frames = {};
    end
    
    methods
        function obj = helperLidarRadarTrackFusionDisplay(varargin)
            setProperties(obj, nargin, varargin{:});
        end
    end
    
    methods
        function updateExampleAnimations(obj,varargin)
            writeAnimation(obj,60:80,1,0.5,'LidarClusteringFault',0.75);
            writeAnimation(obj,1:numel(obj.Frames),3,0.5,'RadarLidarTrackFusion',0.75);
            writeAnimation(obj,100:114,1,0.5,'LongRangeTargetFusion',0.75);
        end
        
        function showLegend(~,scenario)
            % Only created during publishing the example. 
            if ~isempty(snapnow('get'))
                % Create a display, plot everything and show its legend one
                % time and delete the plots
                f = figure('Units','normalized','Position',[0.2 0.2 0.25 0.35]);
                p = helperPanelDisplay('Parent',f,...
                    'PlotRoads',false,...
                    'PlotGroundTruth',true,...
                    'PlotSegmentedPointClouds',false);
                setupPlotters(p,scenario,{},[],[],{});
                showLegend(p);

                p.pTheaterPlot.Parent.Legend.FontSize = 15;
                snapnow();
            end
        end
        
        function writeAnimation(obj,frameIndices,dsFactor,delay,fName,scale)
           if nargin == 5
               scale = 1;
           end
           
           if obj.RecordGIF
               frames = obj.Frames(frameIndices);
               imSize = size(imresize(frames{1}.cdata,scale));
               im = zeros(imSize(1),imSize(2),1,floor(numel(frames)/dsFactor),'uint8');
               map = [];
               count = 1;
               for i = 1:dsFactor:numel(frames)
                   thisImage = frames{i}.cdata;
                   thisImage = imresize(thisImage,scale);
                   if isempty(map)
                       [im(:,:,1,count),map] = rgb2ind(thisImage,256,'nodither');
                   else
                       im(:,:,1,count) = rgb2ind(thisImage,map,'nodither');
                   end
                   count = count + 1;
               end
               imwrite(im,map,[fName,'.gif'],'DelayTime',delay,'LoopCount',inf);
           end
        end
        
        function writeScenarioAnimation(obj, scenario, radars, lidar)
            fig = figure('Units','normalized','Position',[0.1 0.1 0.6 0.6]);
            p = uipanel('Parent',fig,'Position',[0 0.5 0.5 0.5],'Title','Front View','FontSize',16,...
                'FontWeight','bold');
            
            disp1 = helperPanelDisplay(...
                'ViewLocation',[-11.75 0],...
                'ViewYaw',0,...
                'ViewPitch',0,...
                'ViewHeight',3.1,...
                'ViewRoll',0,...
                'Parent',p,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',true,...
                'PlotSegmentedPointClouds',false,...
                'PlotFusedTracks',false,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',true);
            
            p2 = uipanel('Parent',fig,'Position',[0 0 0.5 0.5],'Title','Rear View','FontSize',16,...
                'FontWeight','bold');
            disp2 = helperPanelDisplay(...
                'ViewLocation',[11.75 0],...
                'ViewYaw',180,...
                'ViewPitch',0,...
                'ViewHeight',3.1,...
                'ViewRoll',0,...
                'Parent',p2,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',true,...
                'PlotSegmentedPointClouds',false,...
                'PlotFusedTracks',false,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);
            
            p3 = uipanel('Parent',fig,'Position',[0.5 0 0.5 1],'Title','Top View','FontSize',16,...
                'FontWeight','bold');
            disp3 = helperPanelDisplay(...
                'ViewLocation',[0 0],...
                'ViewYaw',0,...
                'ViewPitch',90,...
                'ViewHeight',200,...
                'ViewRoll',0,...
                'Parent',p3,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',true,...
                'PlotSegmentedPointClouds',false,...
                'PlotFusedTracks',false,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotCoverage',true,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);
            
            ego = scenario.Actors(obj.EgoVehicleIndex);
            
            restart(scenario);
            for i = 1:numel(radars)
                release(radars{i});
            end
            release(lidar);
            
            count = 1;
            while advance(scenario)
                tgtPoses = targetPoses(ego);

                time = scenario.SimulationTime;

                % Collect radar detections
                radarDetections = cell(0,1);
                for i = 1:numel(radars)
                    thisRadarDetections = step(radars{i},tgtPoses,time);
                    radarDetections = [radarDetections;thisRadarDetections]; %#ok<AGROW>
                end

                % Collect lidar point cloud
                rdMesh = roadMesh(ego);
                [ptCloud,~,clusters] = step(lidar, tgtPoses, rdMesh, time);
                
                ground = clusters(:,2) == -1;

                segmentationInfo = struct('GroundIndices',ground,'ObstacleIndices',~ground);
                
                step(disp1,...
                    scenario, radars, radarDetections, [],...
                    lidar, ptCloud, [], segmentationInfo, [], []);
                
                step(disp2,...
                    scenario, radars, radarDetections, [],...
                    lidar, ptCloud, [], segmentationInfo, [], []);

                step(disp3,...
                    scenario, radars, radarDetections, [],...
                    lidar, ptCloud, [], segmentationInfo, [], []);

                
                obj.Frames{count} = getframe(fig);
                
                count = count + 1;
            end
            
            writeAnimation(obj,1:numel(obj.Frames),3,0.3,'RadarLidarTrackFusionScenario',0.75);
            obj.Frames = {};
        end
    end
    
    methods (Access = protected)
        function setupImpl(obj, varargin)
            % Create figure
            f = figure('Units','normalized',...
                'Position',[0.1 0.1 0.8 0.8],...
                'Visible','off');
            
            % Show display if not publishing
            if isempty(snapnow('get'))
                f.Visible = 'on';
            end
            
            if obj.RecordGIF
                f.Position(3:4) = 0.6;
            end
            % Setup each display
            setupFusedDisplay(obj, f);
            setupRadarDisplay(obj, f);
            setupLidarDisplay(obj, f);
            setupCovarianceFusionDisplay(obj, f);
            
            % Assign figure
            obj.Figure = f;
        end
        
        function stepImpl(obj, varargin)
            
            % Update each display
            obj.FusedDisplayFront(varargin{:});
            obj.FusedDisplayRear(varargin{:});
            obj.RadarDisplay(varargin{:});
            obj.LidarDisplay(varargin{:});
            obj.CovarianceFusionDisplay(varargin{:});
            obj.TimeStep = obj.TimeStep + 1;
           
            timeStepText = ['Time Step = ',num2str(obj.TimeStep)];
            
            obj.FusedDisplayFront.Parent.Title = ['Front View (', timeStepText,' )'];
            
            drawnow;
            
            if obj.RecordGIF
                obj.Frames{end+1} = getframe(obj.Figure);
            end
        end
    end
    
    methods (Access = protected)
        function setupFusedDisplay(obj, fig)
            p = uipanel('Parent',fig,'Position',[0 0.5 0.5 0.5],'Title','Front View',...
                'FontSize',16,...
                'FontWeight','bold',...
                'TitlePosition','lefttop');
            obj.FusedDisplayFront = helperPanelDisplay(...
                'ViewLocation',[-11.75 0],...
                'ViewYaw',0,...
                'ViewPitch',0,...
                'ViewHeight',3.1,...
                'ViewRoll',0,...
                'Parent',p,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',true,...
                'PlotSegmentedPointClouds',false,...
                'PlotFusedTracks',true,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);

            p2 = uipanel('Parent',fig,'Position',[0 0 0.5 0.5],'Title','Rear View','FontSize',16,...
                'FontWeight','bold',...
                'TitlePosition','lefttop');
            obj.FusedDisplayRear = helperPanelDisplay(...
                'ViewLocation',[11.75 0],...
                'ViewYaw',180,...
                'ViewPitch',0,...
                'ViewHeight',3.1,...
                'ViewRoll',0,...
                'Parent',p2,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',true,...
                'PlotSegmentedPointClouds',false,...
                'PlotFusedTracks',true,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);
        end
        function setupRadarDisplay(obj, fig)
            p = uipanel('Parent',fig,'Position',[0.75 0.5 0.25 0.5],'Title','Radar','FontSize',16,...
                'FontWeight','bold',...
                'TitlePosition','lefttop');
            obj.RadarDisplay = helperPanelDisplay(...
                'ViewLocation',[15 0],...
                'ViewHeight',120,...
                'ViewYaw',0,...
                'ViewPitch',90,...
                'ViewRoll',0,...
                'Parent',p,...
                'PlotRadarTracks',true,...
                'PlotLidarTracks',false,...
                'PlotPointClouds',false,...
                'PlotFusedTracks',false,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',false,...
                'PlotRoads',true,...
                'PlotGroundTruth',true,...
                'PlotCoverage',true,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);
        end
        function setupLidarDisplay(obj, fig)
            p = uipanel('Parent',fig,'Position',[0.5 0.5 0.25 0.5],...
                'Title','Lidar',...
                'FontSize',16,...
                'FontWeight','bold',...
                'TitlePosition','lefttop');
            obj.LidarDisplay = helperPanelDisplay(...
                'ViewLocation',[15 0],...
                'ViewHeight',120,...
                'ViewYaw',0,...
                'ViewPitch',90,...
                'ViewRoll',0,...
                'Parent',p,...
                'PlotRadarTracks',false,...
                'PlotLidarTracks',true,...
                'PlotPointClouds',true,...
                'PlotFusedTracks',false,...
                'PlotRadarDetections',false,...
                'PlotLidarDetections',true,...
                'PlotRoads',true,...
                'PlotGroundTruth',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false);
        end
        function setupCovarianceFusionDisplay(obj, fig)
            p = uipanel('Parent',fig,'Position',[0.5 0 0.5 0.5],...
                'Title','Close-up Display',...
                'FontSize',16,...
                'FontWeight','bold',...
                'TitlePosition','lefttop');
            obj.CovarianceFusionDisplay = helperPanelDisplay(...
                'ViewLocation',[1.35 0],...
                'ViewHeight',10,...
                'ViewYaw',0,...
                'ViewPitch',90,...
                'ViewRoll',0,...
                'Parent',p,...
                'PlotRadarTracks',true,...
                'PlotLidarTracks',true,...
                'PlotPointClouds',false,...
                'PlotFusedTracks',true,...
                'PlotRadarDetections',true,...
                'PlotLidarDetections',true,...
                'PlotTrackCovariance',true,...
                'PlotTrackVelocity',false,...
                'PlotRoads',false,...
                'PlotGroundTruth',true,...
                'PlotCoverage',false,...
                'EgoVehicleIndex',obj.EgoVehicleIndex,...
                'ShowLegend',false,...
                'FollowActorID',obj.FollowActorID);
            obj.CovarianceFusionDisplay.pTheaterPlot.Parent.Projection = 'orthographic';
        end
    end
end